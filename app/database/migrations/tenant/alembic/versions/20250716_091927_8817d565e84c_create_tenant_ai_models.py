"""create_tenant_ai_models

Revision ID: 8817d565e84c
Revises: 
Create Date: 2025-07-16 09:19:27.747611

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8817d565e84c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """create_tenant_ai_models"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_fam',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=True),
    sa.Column('last_name', sa.String(length=255), nullable=True),
    sa.Column('family_head', sa.UUID(), nullable=True),
    sa.Column('family_size', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_person',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('middle_name', sa.String(length=50), nullable=True),
    sa.Column('joined_via', sa.String(length=50), nullable=True),
    sa.Column('gender', sa.String(length=10), nullable=True),
    sa.Column('dob', sa.Date(), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=25), nullable=True),
    sa.Column('fam_id', sa.UUID(), nullable=True),
    sa.Column('fam_relationship', sa.String(length=50), nullable=True),
    sa.Column('is_adult', sa.Boolean(), nullable=True),
    sa.Column('invited_on', sa.DateTime(), nullable=True),
    sa.Column('first_time_visit', sa.DateTime(), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('time_to_contact', sa.String(length=50), nullable=True),
    sa.Column('joining_our_church', sa.String(length=50), nullable=True),
    sa.Column('daily_devotional', sa.String(length=50), nullable=True),
    sa.Column('just_relocated', sa.String(length=50), nullable=True),
    sa.Column('consider_joining', sa.String(length=50), nullable=True),
    sa.Column('feedback', sa.String(length=250), nullable=True),
    sa.Column('baptism_date', sa.Date(), nullable=True),
    sa.Column('conversion_date', sa.Date(), nullable=True),
    sa.Column('membership_date', sa.Date(), nullable=True),
    sa.Column('spiritual_need', sa.Text(), nullable=True),
    sa.Column('spiritual_challenge', sa.Text(), nullable=True),
    sa.Column('prayer_request', sa.Text(), nullable=True),
    sa.Column('ai_note_generated', sa.Boolean(), nullable=False),
    sa.Column('ai_processing_status', sa.String(length=50), nullable=False),
    sa.Column('ai_confidence_score', sa.Float(), nullable=True),
    sa.Column('ai_model_version', sa.String(length=50), nullable=True),
    sa.Column('last_ai_processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_person_fam_id'), 'ai_person', ['fam_id'], unique=False)
    op.create_index(op.f('ix_ai_person_id'), 'ai_person', ['id'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the report'),
    sa.Column('admin_id', sa.UUID(), nullable=False, comment='Admin who created the report'),
    sa.Column('report_type', sa.String(length=50), nullable=False, comment='Type of report, e.g., Snapshot, Journey, Weekly'),
    sa.Column('date_range_start', sa.Date(), nullable=False, comment='Start date of the report period'),
    sa.Column('date_range_end', sa.Date(), nullable=False, comment='End date of the report period'),
    sa.Column('purpose', sa.String(length=255), nullable=True, comment='Purpose or context of the report'),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Content of the report'),
    sa.Column('generated_by', sa.String(length=255), nullable=False, comment='User or system that generated the report'),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the report was generated'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tenants',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tenant_name', sa.String(length=255), nullable=False),
    sa.Column('tenant_type', sa.String(length=50), nullable=True),
    sa.Column('domain', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=255), nullable=True),
    sa.Column('website', sa.String(length=255), nullable=True),
    sa.Column('social_links', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tenant_address', sa.String(length=255), nullable=True),
    sa.Column('tenant_city', sa.String(length=255), nullable=True),
    sa.Column('tenant_state', sa.String(length=255), nullable=True),
    sa.Column('tenant_country', sa.String(length=255), nullable=True),
    sa.Column('tenant_country_code', sa.String(length=10), nullable=True),
    sa.Column('zip', sa.String(length=10), nullable=True),
    sa.Column('landmark', sa.String(length=255), nullable=True),
    sa.Column('tenant_timezone', sa.String(length=255), nullable=True),
    sa.Column('parish_name', sa.String(length=255), nullable=True),
    sa.Column('branch', sa.String(length=255), nullable=True),
    sa.Column('logo_url', sa.String(length=255), nullable=True),
    sa.Column('tenant_head', sa.UUID(), nullable=True),
    sa.Column('tenant_status', sa.String(length=255), nullable=True),
    sa.Column('adult_consent', sa.Integer(), server_default=sa.text('16'), nullable=False),
    sa.Column('member_data_retention_period', sa.Integer(), server_default=sa.text('30'), nullable=False),
    sa.Column('team_deletion_grace_period', sa.Integer(), server_default=sa.text('30'), nullable=False),
    sa.Column('group_deletion_grace_period', sa.Integer(), server_default=sa.text('30'), nullable=False),
    sa.Column('registry_id', sa.Integer(), nullable=False, comment='References tenant_registry.id in public schema'),
    sa.Column('tenant_date_created', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('domain', name='tenant_domain_unique')
    )
    op.create_table('ai_decision_audit',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('person_id', sa.UUID(), nullable=True),
    sa.Column('rule_id', sa.String(length=100), nullable=True),
    sa.Column('rule_description', sa.String(), nullable=True),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('triggered', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ai_confidence_score', sa.Float(), nullable=True),
    sa.Column('ai_model_version', sa.String(length=50), nullable=True),
    sa.Column('ai_processing_status', sa.String(length=20), nullable=True),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('follow_up_note_type', sa.Enum('INDIVIDUAL', 'FAMILY', name='followuptype'), nullable=True),
    sa.ForeignKeyConstraint(['person_id'], ['ai_person.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_suppression_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('person_id', sa.UUID(), nullable=False),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('module_name', sa.String(length=50), nullable=True),
    sa.Column('suppressed_entity_id', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['person_id'], ['ai_person.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_task',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('task_title', sa.String(length=255), nullable=True),
    sa.Column('task_description', sa.Text(), nullable=True),
    sa.Column('task_type', sa.String(length=50), nullable=True),
    sa.Column('task_status', sa.String(length=100), nullable=True),
    sa.Column('task_priority', sa.String(length=50), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('recipient_id', sa.Integer(), nullable=True),
    sa.Column('recipient_person_id', sa.UUID(), nullable=True),
    sa.Column('recipient_family_id', sa.UUID(), nullable=True),
    sa.Column('task_assignee_id', sa.UUID(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('follow_up_user', sa.String(length=100), nullable=True),
    sa.Column('assign_usertype', sa.String(length=100), nullable=True),
    sa.Column('routed_to', sa.String(length=255), nullable=True),
    sa.Column('task_type_flag', sa.String(length=100), nullable=True),
    sa.Column('follow_up_prev_task', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ai_confidence_score', sa.Float(), nullable=True),
    sa.Column('ai_model_version', sa.String(length=50), nullable=True),
    sa.Column('ai_processing_status', sa.String(length=20), nullable=True),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('follow_up_note_type', sa.Enum('INDIVIDUAL', 'FAMILY', name='followuptype'), nullable=True),
    sa.ForeignKeyConstraint(['recipient_family_id'], ['ai_fam.id'], ),
    sa.ForeignKeyConstraint(['recipient_person_id'], ['ai_person.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_notes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('person_id', sa.UUID(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('task_assignee_id', sa.UUID(), nullable=True),
    sa.Column('recipient_id', sa.UUID(), nullable=True),
    sa.Column('recipient_family_id', sa.UUID(), nullable=True),
    sa.Column('notes_body', sa.Text(), nullable=True),
    sa.Column('note_link', sa.String(length=255), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional metadata, e.g., tags, categories, etc.'),
    sa.Column('ai_generated', sa.Boolean(), nullable=False),
    sa.Column('ai_model_used', sa.String(length=100), nullable=True),
    sa.Column('ai_generation_prompt', sa.Text(), nullable=True),
    sa.Column('ai_review_status', sa.String(length=50), nullable=False),
    sa.Column('is_edited', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ai_confidence_score', sa.Float(), nullable=True),
    sa.Column('ai_model_version', sa.String(length=50), nullable=True),
    sa.Column('ai_processing_status', sa.String(length=20), nullable=True),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('follow_up_note_type', sa.Enum('INDIVIDUAL', 'FAMILY', name='followuptype'), nullable=True),
    sa.ForeignKeyConstraint(['recipient_family_id'], ['ai_fam.id'], ),
    sa.ForeignKeyConstraint(['recipient_id'], ['ai_person.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['ai_task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_notes_task_id'), 'ai_notes', ['task_id'], unique=False)
    op.create_table('ai_feedback',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('person_id', sa.UUID(), nullable=False),
    sa.Column('note_id', sa.Integer(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('helpfulness', sa.String(length=20), nullable=True),
    sa.Column('user_comment', sa.String(length=500), nullable=True),
    sa.Column('admin_id', sa.UUID(), nullable=True),
    sa.Column('feedback_category', sa.String(length=100), nullable=True),
    sa.Column('tone', sa.String(length=25), nullable=True),
    sa.Column('suggested_action', sa.Text(), nullable=True),
    sa.Column('analysis_text', sa.Text(), nullable=True),
    sa.Column('ai_model_version', sa.String(length=50), nullable=True),
    sa.Column('ai_confidence_score', sa.Float(), nullable=True),
    sa.Column('confidence_score_int', sa.Integer(), nullable=True),
    sa.Column('is_user_feedback', sa.Boolean(), nullable=True),
    sa.Column('is_automated_analysis', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['ai_notes.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['ai_person.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['ai_task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_recommendation_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('person_id', sa.UUID(), nullable=True),
    sa.Column('note_id', sa.Integer(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('module_name', sa.String(length=50), nullable=False, comment='Module or context of the recommendation'),
    sa.Column('recommended_entity_type', sa.String(length=50), nullable=True, comment='Type of entity recommended  e,g decision, event, note'),
    sa.Column('recommended_entity_id', sa.String(length=50), nullable=True, comment='ID of the recommended entity'),
    sa.Column('recommendation_score', sa.Integer(), nullable=True, comment='Score or rank of the recommendation'),
    sa.Column('recommendation_tier', sa.String(length=25), nullable=True, comment='Tier or category of the recommendation'),
    sa.Column('rationale', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['ai_notes.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['ai_person.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['ai_task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """create_tenant_ai_models"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ai_recommendation_log')
    op.drop_table('ai_feedback')
    op.drop_index(op.f('ix_ai_notes_task_id'), table_name='ai_notes')
    op.drop_table('ai_notes')
    op.drop_table('ai_task')
    op.drop_table('ai_suppression_log')
    op.drop_table('ai_decision_audit')
    op.drop_table('tenants')
    op.drop_table('reports')
    op.drop_index(op.f('ix_ai_person_id'), table_name='ai_person')
    op.drop_index(op.f('ix_ai_person_fam_id'), table_name='ai_person')
    op.drop_table('ai_person')
    op.drop_table('ai_fam')
    # ### end Alembic commands ###
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;




CREATE TABLE IF NOT EXISTS demo.bulk_upload_history
(
    id serial NOT NULL,
    person_id uuid,
    status character varying(255) COLLATE pg_catalog."default",
    file_name character varying(255) COLLATE pg_catalog."default",
    file_original_name character varying(255) COLLATE pg_catalog."default",
    file_size character varying(255) COLLATE pg_catalog."default",
    file_type character varying(255) COLLATE pg_catalog."default",
    sheet_headers jsonb,
    failed_import text COLLATE pg_catalog."default",
    errors json,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT bulk_upload_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.church_branch
(
    id serial NOT NULL,
    tenant_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tenant_type character varying(50) COLLATE pg_catalog."default",
    tenant_address character varying(255) COLLATE pg_catalog."default",
    tenant_city character varying(255) COLLATE pg_catalog."default",
    tenant_state character varying(255) COLLATE pg_catalog."default",
    tenant_country character varying(255) COLLATE pg_catalog."default",
    tenant_country_code character varying(10) COLLATE pg_catalog."default",
    tenant_timezone character varying(255) COLLATE pg_catalog."default",
    tenant_date_created date,
    logo_url character varying(255) COLLATE pg_catalog."default",
    domain character varying(255) COLLATE pg_catalog."default" NOT NULL,
    parish_name character varying(255) COLLATE pg_catalog."default",
    website character varying(255) COLLATE pg_catalog."default",
    branch character varying(255) COLLATE pg_catalog."default",
    zip character varying(10) COLLATE pg_catalog."default",
    landmark character varying(255) COLLATE pg_catalog."default",
    social_links jsonb,
    email character varying(255) COLLATE pg_catalog."default",
    phone character varying(255) COLLATE pg_catalog."default",
    adult_consent integer NOT NULL DEFAULT 16,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    tenant_head uuid,
    tenant_status character varying(255) COLLATE pg_catalog."default",
    member_data_retention_period integer NOT NULL DEFAULT 30,
    team_deletion_grace_period integer NOT NULL DEFAULT 30,
    group_deletion_grace_period integer NOT NULL DEFAULT 30,
    CONSTRAINT church_branch_pkey PRIMARY KEY (id),
    CONSTRAINT church_branch_domain_unique UNIQUE (domain)
);

CREATE TABLE IF NOT EXISTS demo.emergency_contact
(
    id serial NOT NULL,
    person_id uuid,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    email character varying(50) COLLATE pg_catalog."default",
    phone_number character varying(50) COLLATE pg_catalog."default",
    address character varying(225) COLLATE pg_catalog."default",
    city character varying(50) COLLATE pg_catalog."default",
    state character varying(50) COLLATE pg_catalog."default",
    country character varying(50) COLLATE pg_catalog."default",
    country_code character varying(10) COLLATE pg_catalog."default",
    zip character varying(10) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT emergency_contact_pkey PRIMARY KEY (id),
    CONSTRAINT emergency_contact_person_id_unique UNIQUE (person_id)
);

CREATE TABLE IF NOT EXISTS demo.fam
(
    id uuid NOT NULL,
    first_name character varying(255) COLLATE pg_catalog."default",
    last_name character varying(255) COLLATE pg_catalog."default",
    family_head uuid,
    spouse_first_name character varying(50) COLLATE pg_catalog."default",
    fam_address character varying(255) COLLATE pg_catalog."default",
    fam_city character varying(50) COLLATE pg_catalog."default",
    fam_state character varying(50) COLLATE pg_catalog."default",
    fam_zip character varying(50) COLLATE pg_catalog."default",
    fam_country character varying(50) COLLATE pg_catalog."default",
    fam_country_code character varying(25) COLLATE pg_catalog."default",
    fam_wedding_date date,
    fam_last_edit_by character varying(255) COLLATE pg_catalog."default",
    fam_entered_by character varying(255) COLLATE pg_catalog."default",
    profile_pic character varying(255) COLLATE pg_catalog."default",
    fam_import_status character varying(50) COLLATE pg_catalog."default",
    bulk_upload_history_id integer,
    is_new boolean DEFAULT true,
    family_size integer,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    joined_via character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT fam_pkey PRIMARY KEY (id),
    CONSTRAINT fam_lastname_address_unique UNIQUE (last_name, fam_address)
);

CREATE TABLE IF NOT EXISTS demo.fam_request
(
    person_id uuid NOT NULL,
    fam_id uuid NOT NULL,
    request_type character varying(250) COLLATE pg_catalog."default",
    relationship character varying(100) COLLATE pg_catalog."default",
    dest_fam_id uuid,
    dest_fam_label text COLLATE pg_catalog."default",
    fam_label character varying(255) COLLATE pg_catalog."default",
    dest_fam_message character varying(255) COLLATE pg_catalog."default",
    is_last_hoh boolean,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fam_request_pkey PRIMARY KEY (person_id, fam_id)
);

CREATE TABLE IF NOT EXISTS demo.form_config
(
    id serial NOT NULL,
    title integer,
    form_id integer,
    link character varying(255) COLLATE pg_catalog."default",
    table_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    slug character varying(255) COLLATE pg_catalog."default",
    form_fields text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT form_config_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.hobby
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    label character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total_selected integer,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT hobby_pkey PRIMARY KEY (id),
    CONSTRAINT hobby_name_unique UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS demo.kid
(
    id uuid NOT NULL,
    kid_hobbies character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    kid_school_class character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT kid_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.knex_migrations
(
    id serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    batch integer,
    migration_time timestamp with time zone,
    CONSTRAINT knex_migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.knex_migrations_lock
(
    index serial NOT NULL,
    is_locked integer,
    CONSTRAINT knex_migrations_lock_pkey PRIMARY KEY (index)
);

CREATE TABLE IF NOT EXISTS demo.member_services
(
    id serial NOT NULL,
    service_name character varying(255) COLLATE pg_catalog."default",
    service_description character varying(255) COLLATE pg_catalog."default",
    service_category character varying(255) COLLATE pg_catalog."default",
    service_label character varying(255) COLLATE pg_catalog."default",
    template_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT member_services_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.notes
(
    id serial NOT NULL,
    title character varying(200) COLLATE pg_catalog."default",
    task_id integer NOT NULL,
    person_id uuid,
    notes_body text COLLATE pg_catalog."default",
    note_link character varying(255) COLLATE pg_catalog."default",
    note_photos character varying(255) COLLATE pg_catalog."default",
    file_attachment character varying(255) COLLATE pg_catalog."default",
    is_edited boolean DEFAULT false,
    is_archived boolean DEFAULT false,
    task_assignee_id integer,
    recipient_id uuid,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    recipient_fam_id uuid,
    CONSTRAINT notes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.person
(
    id uuid NOT NULL,
    title character varying(255) COLLATE pg_catalog."default",
    church_branch_id integer,
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    middle_name character varying(50) COLLATE pg_catalog."default",
    gender character varying(10) COLLATE pg_catalog."default",
    dob date,
    email character varying(255) COLLATE pg_catalog."default",
    country_code character varying(10) COLLATE pg_catalog."default",
    phone character varying(25) COLLATE pg_catalog."default",
    zip character varying(255) COLLATE pg_catalog."default",
    address character varying(255) COLLATE pg_catalog."default",
    city character varying(255) COLLATE pg_catalog."default",
    state character varying(255) COLLATE pg_catalog."default",
    country character varying(255) COLLATE pg_catalog."default",
    how_join character varying(255) COLLATE pg_catalog."default",
    joined_via character varying(25) COLLATE pg_catalog."default",
    username character varying(255) COLLATE pg_catalog."default",
    profile_pic_url character varying(255) COLLATE pg_catalog."default",
    visibility jsonb,
    is_verified boolean NOT NULL DEFAULT false,
    has_account boolean NOT NULL DEFAULT false,
    is_staff boolean DEFAULT false,
    is_volunteer boolean DEFAULT false,
    volunteer_type character varying(255) COLLATE pg_catalog."default",
    marital_status character varying(255) COLLATE pg_catalog."default",
    wedding_date date,
    preferred_comm_method character varying(255) COLLATE pg_catalog."default",
    highest_qualification character varying(255) COLLATE pg_catalog."default",
    school character varying(255) COLLATE pg_catalog."default",
    course character varying(255) COLLATE pg_catalog."default",
    is_graduated boolean,
    employment_status character varying(255) COLLATE pg_catalog."default",
    employer character varying(255) COLLATE pg_catalog."default",
    profession character varying(255) COLLATE pg_catalog."default",
    industry character varying(255) COLLATE pg_catalog."default",
    job_title character varying(255) COLLATE pg_catalog."default",
    baptism_date date,
    conversion_date date,
    membership_date date,
    baptism_location character varying(255) COLLATE pg_catalog."default",
    spiritual_need text COLLATE pg_catalog."default",
    spiritual_challenge text COLLATE pg_catalog."default",
    notification_active boolean,
    social_links jsonb,
    grade character varying(50) COLLATE pg_catalog."default",
    join_date date,
    is_flag boolean DEFAULT false,
    bio text COLLATE pg_catalog."default",
    maiden_name character varying(255) COLLATE pg_catalog."default",
    landmark character varying(255) COLLATE pg_catalog."default",
    relationship character varying(50) COLLATE pg_catalog."default",
    is_adult boolean,
    import_status character varying(25) COLLATE pg_catalog."default",
    family_status character varying(25) COLLATE pg_catalog."default",
    family_date_added timestamp with time zone,
    race character varying(255) COLLATE pg_catalog."default",
    email_fail_reason text COLLATE pg_catalog."default",
    resend_link character varying(255) COLLATE pg_catalog."default",
    registration_link_status character varying(255) COLLATE pg_catalog."default",
    last_login timestamp with time zone,
    session_expiry timestamp with time zone,
    is_logout boolean NOT NULL DEFAULT false,
    invited_on timestamp with time zone,
    is_deactivated boolean DEFAULT false,
    first_time_login timestamp with time zone,
    is_archive boolean,
    prayer_request text COLLATE pg_catalog."default",
    daily_devotional character varying(255) COLLATE pg_catalog."default",
    just_relocated character varying(255) COLLATE pg_catalog."default",
    consider_joining character varying(255) COLLATE pg_catalog."default",
    feedback text COLLATE pg_catalog."default",
    deactivated_reason text COLLATE pg_catalog."default",
    timezone character varying(255) COLLATE pg_catalog."default",
    time_to_contact character varying(255) COLLATE pg_catalog."default",
    joining_our_church character varying(255) COLLATE pg_catalog."default",
    deleted_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fam_id uuid,
    user_type_id integer NOT NULL,
    bulk_upload_history_id integer,
    member_status character varying(50) COLLATE pg_catalog."default",
    login_status text COLLATE pg_catalog."default" DEFAULT 'never_logged_in'::text,
    ministry_department text COLLATE pg_catalog."default",
    advert_team text COLLATE pg_catalog."default",
    fcm_token character varying(255) COLLATE pg_catalog."default",
    avatar_color character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT person_pkey PRIMARY KEY (id),
    CONSTRAINT person_email_unique UNIQUE (email),
    CONSTRAINT person_username_unique UNIQUE (username),
    CONSTRAINT unique_valid_fcm_token UNIQUE (fcm_token)
);

CREATE TABLE IF NOT EXISTS demo.person_hobby
(
    id serial NOT NULL,
    person_id uuid NOT NULL,
    hobby_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT person_hobby_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.person_note
(
    id serial NOT NULL,
    person_id uuid NOT NULL,
    note_id integer NOT NULL,
    note_privacy character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT person_note_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.person_professional_interest
(
    id serial NOT NULL,
    person_id uuid NOT NULL,
    professional_interest_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT person_professional_interest_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.person_role
(
    id serial NOT NULL,
    role_id integer NOT NULL,
    person_id uuid NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT person_role_pkey PRIMARY KEY (id),
    CONSTRAINT person_role_person_id_role_id_unique UNIQUE (person_id, role_id)
);

CREATE TABLE IF NOT EXISTS demo.process
(
    id serial NOT NULL,
    template_id integer,
    process_name text COLLATE pg_catalog."default",
    process_type text COLLATE pg_catalog."default",
    process_description text COLLATE pg_catalog."default",
    configured_by uuid,
    process_label character varying(50) COLLATE pg_catalog."default",
    processtask_criteria character varying(255) COLLATE pg_catalog."default",
    process_planned_startdate date,
    process_planned_starttime time with time zone,
    process_planned_enddate date,
    process_planned_endtime time with time zone,
    process_actual_starttime timestamp without time zone,
    process_creation_datetime timestamp with time zone,
    process_completion_datetime timestamp with time zone,
    process_status character varying(50) COLLATE pg_catalog."default",
    routed_to character varying(255) COLLATE pg_catalog."default",
    is_active boolean,
    assign_usertype character varying(255) COLLATE pg_catalog."default",
    follow_up_user character varying(255) COLLATE pg_catalog."default",
    follow_up_prev_task boolean,
    assign_user_id uuid,
    assignee_role_id integer,
    to_do_notification character varying(50) COLLATE pg_catalog."default",
    to_do_notification_time time with time zone,
    in_progress_notification character varying(255) COLLATE pg_catalog."default",
    in_progress_notification_time time with time zone,
    past_due_date_notification character varying(255) COLLATE pg_catalog."default",
    past_due_date_notification_time time with time zone,
    process_type_flag character varying(255) COLLATE pg_catalog."default",
    process_next_startdate date,
    "interval" integer,
    interval_type character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    execution_day character varying(255) COLLATE pg_catalog."default" DEFAULT 'sunday'::character varying,
    process_planned_startdatetime timestamp with time zone,
    process_planned_enddatetime timestamp with time zone,
    process_actual_endtime time with time zone,
    CONSTRAINT process_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.professional_interest
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    label character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total_selected integer,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT professional_interest_pkey PRIMARY KEY (id),
    CONSTRAINT professional_interest_name_unique UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS demo.profile_edit_history
(
    id serial NOT NULL,
    editor_id uuid,
    profile_id uuid,
    action_performed character varying(250) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT profile_edit_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.profile_view_setting
(
    id uuid NOT NULL,
    "table" character varying(25) COLLATE pg_catalog."default",
    fields jsonb,
    person_id uuid,
    is_default boolean DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT profile_view_setting_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.recipient
(
    id serial NOT NULL,
    person_id uuid,
    fam_id uuid,
    task_type_flag character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT recipient_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.relationships
(
    id serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    parent_id character varying(50) COLLATE pg_catalog."default" DEFAULT '0'::character varying,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT relationships_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.roles
(
    id serial NOT NULL,
    role_id integer NOT NULL,
    role_title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    role_desc character varying(255) COLLATE pg_catalog."default",
    role_status character varying(255) COLLATE pg_catalog."default",
    slug character varying(255) COLLATE pg_catalog."default",
    permissions text COLLATE pg_catalog."default",
    is_admin boolean,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_role_id_unique UNIQUE (role_id)
);

CREATE TABLE IF NOT EXISTS demo.service_request
(
    id serial NOT NULL,
    servicerequest_name character varying(255) COLLATE pg_catalog."default",
    service_type character varying(255) COLLATE pg_catalog."default",
    service_description character varying(255) COLLATE pg_catalog."default",
    service_category character varying(255) COLLATE pg_catalog."default",
    service_label character varying(255) COLLATE pg_catalog."default",
    requested_by uuid,
    assigned_to uuid,
    memberservices_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT service_request_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.task
(
    id serial NOT NULL,
    process_id integer,
    created_by uuid,
    task_title character varying(255) COLLATE pg_catalog."default",
    task_description text COLLATE pg_catalog."default",
    task_type character varying(50) COLLATE pg_catalog."default",
    task_status character varying(100) COLLATE pg_catalog."default",
    task_resolution character varying(255) COLLATE pg_catalog."default",
    task_priority character varying(50) COLLATE pg_catalog."default",
    task_planned_startdate date,
    task_planned_starttime time with time zone,
    task_planned_enddate date,
    task_planned_endtime time with time zone,
    task_actual_startdatetime timestamp with time zone,
    task_actual_enddatetime timestamp with time zone,
    to_do_task_notification_frequency time with time zone,
    to_do_task_notification_frequency_days character varying(255) COLLATE pg_catalog."default",
    in_prog_task_notification_frequency time with time zone,
    in_prog_task_notification_frequency_days character varying(255) COLLATE pg_catalog."default",
    pastdue_task_notification_frequency time with time zone,
    pastdue_task_notification_frequency_days character varying(255) COLLATE pg_catalog."default",
    is_archived boolean NOT NULL DEFAULT false,
    follow_up_prev_task boolean,
    routed_to character varying(255) COLLATE pg_catalog."default",
    recipient_id integer,
    assign_usertype character varying(100) COLLATE pg_catalog."default",
    follow_up_user character varying(100) COLLATE pg_catalog."default",
    task_type_flag character varying(100) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    task_planned_startdatetime timestamp with time zone,
    task_planned_enddatetime timestamp with time zone,
    tenant_id integer DEFAULT 1,
    is_past_due_date boolean DEFAULT false,
    CONSTRAINT task_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.task_assignee
(
    id serial NOT NULL,
    task_id integer NOT NULL,
    assignee_id uuid,
    is_accept boolean DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    assignee_role_id integer,
    CONSTRAINT task_assignee_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.task_feedback
(
    id serial NOT NULL,
    task_id integer NOT NULL,
    is_contacted character varying(255) COLLATE pg_catalog."default",
    has_responded character varying(255) COLLATE pg_catalog."default",
    agreed_to_join character varying(255) COLLATE pg_catalog."default",
    provided_by uuid,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_feedback_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.task_reminder
(
    id serial NOT NULL,
    task_id integer NOT NULL,
    task_assignee_id integer,
    reminder_time timestamp with time zone,
    person_id uuid NOT NULL,
    reminder_desc text COLLATE pg_catalog."default",
    repeat character varying(25) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_reminder_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.template
(
    id serial NOT NULL,
    title character varying(255) COLLATE pg_catalog."default",
    process_type character varying(255) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    template_type character varying(255) COLLATE pg_catalog."default",
    configured_by uuid,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    is_used boolean DEFAULT false,
    CONSTRAINT template_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.user_status
(
    id serial NOT NULL,
    person_id uuid,
    title character varying(250) COLLATE pg_catalog."default",
    slug character varying(250) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_default boolean DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_status_pkey PRIMARY KEY (id),
    CONSTRAINT user_status_slug_unique UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS demo.user_type
(
    id serial NOT NULL,
    person_id uuid,
    name character varying(250) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_default boolean DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS demo.user_type_change_history
(
    history_id serial NOT NULL,
    schema_name text COLLATE pg_catalog."default",
    table_name text COLLATE pg_catalog."default",
    column_name text COLLATE pg_catalog."default",
    old_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    operation text COLLATE pg_catalog."default",
    user_name text COLLATE pg_catalog."default",
    change_time timestamp without time zone,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_type_change_history_pkey PRIMARY KEY (history_id)
);

ALTER TABLE IF EXISTS demo.bulk_upload_history
    ADD CONSTRAINT bulk_upload_history_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.church_branch
    ADD CONSTRAINT church_branch_tenant_head_foreign FOREIGN KEY (tenant_head)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS church_branch_tenant_head_index
    ON demo.church_branch(tenant_head);


ALTER TABLE IF EXISTS demo.emergency_contact
    ADD CONSTRAINT emergency_contact_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS emergency_contact_person_id_unique
    ON demo.emergency_contact(person_id);


ALTER TABLE IF EXISTS demo.fam
    ADD CONSTRAINT fam_family_head_foreign FOREIGN KEY (family_head)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.fam_request
    ADD CONSTRAINT fam_request_dest_fam_id_foreign FOREIGN KEY (dest_fam_id)
    REFERENCES demo.fam (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.fam_request
    ADD CONSTRAINT fam_request_fam_id_foreign FOREIGN KEY (fam_id)
    REFERENCES demo.fam (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.fam_request
    ADD CONSTRAINT fam_request_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.kid
    ADD CONSTRAINT kid_id_foreign FOREIGN KEY (id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS kid_pkey
    ON demo.kid(id);


ALTER TABLE IF EXISTS demo.member_services
    ADD CONSTRAINT member_services_template_id_foreign FOREIGN KEY (template_id)
    REFERENCES demo.template (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.notes
    ADD CONSTRAINT notes_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.notes
    ADD CONSTRAINT notes_recipient_fam_id_foreign FOREIGN KEY (recipient_fam_id)
    REFERENCES demo.fam (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.notes
    ADD CONSTRAINT notes_task_assignee_id_foreign FOREIGN KEY (task_assignee_id)
    REFERENCES demo.task_assignee (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.notes
    ADD CONSTRAINT notes_task_id_foreign FOREIGN KEY (task_id)
    REFERENCES demo.task (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person
    ADD CONSTRAINT person_bulk_upload_history_id_foreign FOREIGN KEY (bulk_upload_history_id)
    REFERENCES demo.bulk_upload_history (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.person
    ADD CONSTRAINT person_church_branch_id_foreign FOREIGN KEY (church_branch_id)
    REFERENCES demo.church_branch (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.person
    ADD CONSTRAINT person_fam_id_foreign FOREIGN KEY (fam_id)
    REFERENCES demo.fam (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person
    ADD CONSTRAINT person_member_status_foreign FOREIGN KEY (member_status)
    REFERENCES demo.user_status (slug) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.person
    ADD CONSTRAINT person_user_type_id_foreign FOREIGN KEY (user_type_id)
    REFERENCES demo.user_type (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.person_hobby
    ADD CONSTRAINT person_hobby_hobby_id_foreign FOREIGN KEY (hobby_id)
    REFERENCES demo.hobby (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_hobby
    ADD CONSTRAINT person_hobby_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_note
    ADD CONSTRAINT person_note_note_id_foreign FOREIGN KEY (note_id)
    REFERENCES demo.notes (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_note
    ADD CONSTRAINT person_note_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_professional_interest
    ADD CONSTRAINT person_professional_interest_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_professional_interest
    ADD CONSTRAINT person_professional_interest_professional_interest_id_foreign FOREIGN KEY (professional_interest_id)
    REFERENCES demo.professional_interest (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_role
    ADD CONSTRAINT person_role_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.person_role
    ADD CONSTRAINT person_role_role_id_foreign FOREIGN KEY (role_id)
    REFERENCES demo.roles (role_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.process
    ADD CONSTRAINT process_configured_by_foreign FOREIGN KEY (configured_by)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.process
    ADD CONSTRAINT process_template_id_foreign FOREIGN KEY (template_id)
    REFERENCES demo.template (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.profile_edit_history
    ADD CONSTRAINT profile_edit_history_editor_id_foreign FOREIGN KEY (editor_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.profile_view_setting
    ADD CONSTRAINT profile_view_setting_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.recipient
    ADD CONSTRAINT recipient_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS demo.service_request
    ADD CONSTRAINT service_request_assigned_to_foreign FOREIGN KEY (assigned_to)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.service_request
    ADD CONSTRAINT service_request_memberservices_id_foreign FOREIGN KEY (memberservices_id)
    REFERENCES demo.member_services (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.service_request
    ADD CONSTRAINT service_request_requested_by_foreign FOREIGN KEY (requested_by)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.task
    ADD CONSTRAINT task_created_by_foreign FOREIGN KEY (created_by)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.task
    ADD CONSTRAINT task_process_id_foreign FOREIGN KEY (process_id)
    REFERENCES demo.process (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.task_assignee
    ADD CONSTRAINT task_assignee_assignee_id_foreign FOREIGN KEY (assignee_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.task_assignee
    ADD CONSTRAINT task_assignee_assignee_role_id_foreign FOREIGN KEY (assignee_role_id)
    REFERENCES demo.roles (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.task_assignee
    ADD CONSTRAINT task_assignee_task_id_foreign FOREIGN KEY (task_id)
    REFERENCES demo.task (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.task_feedback
    ADD CONSTRAINT task_feedback_provided_by_foreign FOREIGN KEY (provided_by)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.task_feedback
    ADD CONSTRAINT task_feedback_task_id_foreign FOREIGN KEY (task_id)
    REFERENCES demo.task (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.task_reminder
    ADD CONSTRAINT task_reminder_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.task_reminder
    ADD CONSTRAINT task_reminder_task_id_foreign FOREIGN KEY (task_id)
    REFERENCES demo.task (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS demo.template
    ADD CONSTRAINT template_configured_by_foreign FOREIGN KEY (configured_by)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.user_status
    ADD CONSTRAINT user_status_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS demo.user_type
    ADD CONSTRAINT user_type_person_id_foreign FOREIGN KEY (person_id)
    REFERENCES demo.person (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;

END;